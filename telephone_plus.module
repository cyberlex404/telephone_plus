<?php

/**
 * @file
 * Contains telephone_plus.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\FieldStorageConfigInterface;

/**
 * Implements hook_help().
 */
function telephone_plus_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the telephone_plus module.
    case 'help.page.telephone_plus':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Telephone field plus operator and messengers') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_ENTITY_TYPE_update() for 'field_storage_config'.
 */
function telephone_plus_field_storage_config_update(FieldStorageConfigInterface $field_storage) {
  drupal_static_reset('telephone_plus_allowed_operators');
  // было  options_allowed_values
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'field_storage_config'.
 */
function telephone_plus_field_storage_config_delete(FieldStorageConfigInterface $field_storage) {
  drupal_static_reset('telephone_plus_allowed_operators');
}

/**
 * Returns the array of allowed values for a list field.
 *
 * The strings are not safe for output. Keys and values of the array should be
 * sanitized through \Drupal\Core\Field\AllowedTagsXssTrait::fieldFilterXss()
 * before being displayed.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|NULL $entity
 *   (optional) The specific entity when this function is called from the
 *   context of a specific field on a specific entity. This allows custom
 *   'allowed_operators_function' callbacks to either restrict the values or
 *   customize the labels for particular bundles and entities. NULL when
 *   there is not a specific entity available, such as for Views filters.
 *
 * @return array
 *   The array of allowed values. Keys of the array are the raw stored values
 *   (number or text), values of the array are the display labels.
 *
 * @see callback_allowed_operators_function()
 */
function telephone_plus_allowed_operators(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  $allowed_operators = &drupal_static(__FUNCTION__, array());

  $cache_keys = array($definition->getTargetEntityTypeId(), $definition->getName());
  if ($entity) {
    $cache_keys[] = 'entity';
  }
  $cache_id = implode(':', $cache_keys);

  if (!isset($allowed_operators[$cache_id])) {
    $function = $definition->getSetting('allowed_operators_function');
    // If $cacheable is FALSE, then the allowed values are not statically
    // cached. See telephone_plus_test_dynamic_values_callback() for an example of
    // generating dynamic and uncached values.
    $cacheable = TRUE;
    if (!empty($function)) {
      $values = $function($definition, $entity, $cacheable);
    }
    else {
      $values = $definition->getSetting('allowed_operators');
    }

    if ($cacheable) {
      $allowed_operators[$cache_id] = $values;
    }
    else {
      return $values;
    }
  }

  return $allowed_operators[$cache_id];
}

/**
 * Implements hook_field_storage_config_update_forbid().
 */
function telephone_plus_field_storage_config_update_forbid(FieldStorageConfigInterface $field_storage, FieldStorageConfigInterface $prior_field_storage) {
  if ($field_storage->getTypeProvider() == 'telephone_plus' && $field_storage->hasData()) {
    // Forbid any update that removes allowed values with actual data.
    $allowed_operators = $field_storage->getSetting('allowed_operators');
    $prior_allowed_operators = $prior_field_storage->getSetting('allowed_operators');
    $lost_keys = array_keys(array_diff_key($prior_allowed_operators, $allowed_operators));
    if (_telephone_plus_operators_in_use($field_storage->getTargetEntityTypeId(), $field_storage->getName(), $lost_keys)) {
      throw new FieldStorageDefinitionUpdateForbiddenException(t('A list field (@field_name) with existing data cannot have its keys changed.', array('@field_name' => $field_storage->getName())));
    }
  }
}

/**
 * Checks if a list of values are being used in actual field values.
 */
function _telephone_plus_operators_in_use($entity_type, $field_name, $values) {
  if ($values) {
    $factory = \Drupal::service('entity.query');
    $result = $factory->get($entity_type)
      ->condition($field_name . '.operator', $values, 'IN')
      ->count()
      ->accessCheck(FALSE)
      ->range(0, 1)
      ->execute();
    if ($result) {
      return TRUE;
    }
  }

  return FALSE;
}

